/*
    Iniciando vetores para controle de memória      
*/

int pc_processes[10];
int memory_location[10];
int init_pc[10];
int exec[10];
int nomes[10];

int see_if_ended(void){

    int i;
    i = 0;

    while(i < 4){

        if(pc_processes[i] != 0){
            return 0;
        }
        i = i + 1;
    }

    return 1;
}

int find_by_index(int num){

    int i;
    i = 0;

    while(i < 4){
        if(num == nomes[i]){
            return i;
        }
        i = i+1;
    }

    return 10;

}

void main(void){

    /*
        Declarando variáveis
    */

    int i;
    int preempcao;
    int end;
    int opcao;
    int quantidade;
    int processo;
    int indice;
    int nome;

    /*
        Inicia o nomes dos programas
    */ 

    i = 0;
    while(i < 4){
        nomes[i] = i + 1;
        i = i + 1;
    }

    /*
        Perguntando ao usuário quantos programas devem ser executados e o quantum de cada programa
    */ 

    while(1 == 1){

        i = 0;
        while(i < 4){
            clean_ram(memory_location[i]);
            i = i+1;
        }

        /*
        Determinando início de cada processo na rom
        */
        
        pc_processes[0] = 420;
        pc_processes[1] = 439;
        pc_processes[2] = 458;
        pc_processes[3] = 477;


        /*
            Determinando o início de cada processo da ram
        */

        memory_location[0] = 200;
        memory_location[1] = 400;
        memory_location[2] = 600;
        memory_location[3] = 800;

        /*
            Determinadno início de cada processo na rom para salto em instruções do tipo J
        */

        init_pc[0] = 420;
        init_pc[1] = 439;
        init_pc[2] = 458;
        init_pc[3] = 477;

        /*
            Iniciando posições com zero
        */
        
        /*
            Começando menu
        */

        opcao = input();

        /* rodar todos */
        if(opcao == 1){

            preempcao = input();
        
            set_quantum_value(15);

            if(preempcao == 0){
                set_quantum_value(9999);
            }

        }

        if(opcao == 2){
            quantidade = input();
            
            i = 0;
            while(i < 4){
                exec[i] = 0;
                i = i + 1;
            }

            i = 0;
            while(i < quantidade){
                processo = input();
                processo = find_by_index(processo);
                if(processo < 4){
                    exec[processo] = 1;
                    i = i + 1;
                }
            }

            i = 0;
            while(i < 4){
                if(exec[i] != 1){
                    pc_processes[i] = 0;
                }
                i = i+1;
            }

            preempcao = input();
        
            set_quantum_value(15);

            if(preempcao == 0){
                set_quantum_value(9999);
            }


        }

        if(opcao == 3){
            processo = input();
            processo = find_by_index(processo);
            if(processo < 10){
                nomes[processo] = input();
            }
            else{
                output(11111);
            }
        }

        i = 0;
        end = 0;
        set_process_bcd(0);

        if(opcao < 3){

            while(end != 1){

                while(i < 4){
                    
                    if(pc_processes[i] != 0) {
                        set_process_bcd(i+1);
                        change_context(pc_processes[i], memory_location[i], init_pc[i]);
                        pc_processes[i] = PC_INTERRUPTION();         
                        set_process_bcd(0);
                    }

                    i = i+1;
                }

                i = 0;
                end = see_if_ended(); 
            }

        }
        output(9999);
    }
        
}